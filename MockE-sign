# 1. Initialize a new Node.js project:
npm init -y

# 2. Install required dependencies:
npm install express pdf-lib multer fs axios



const express = require('express');
const multer = require('multer');
const fs = require('fs');
const path = require('path');
const { PDFDocument } = require('pdf-lib');
const app = express();
const port = 3000;

// Set up the multer upload folder
const upload = multer({ dest: 'uploads/' });

// Mock data for the simulation
const SIGNER_NAME = 'Test User';
const CONSENT = 'I consent to sign this document digitally';
const OTP = '123456'; // Mock OTP
const CLIENT_ID = 'your-client-id'; // Replace with your client ID
const SIGNATURE_COORDINATES = { x: 50, y: 650, width: 100, height: 20 };

// Create a mock PDF file to test
function createMockPdf() {
  const pdfDoc = PDFDocument.create();
  const page = pdfDoc.addPage([595, 842]); // A4 size

  page.drawText('This is a mock document for Aadhaar e-signing', { x: 50, y: 800, size: 12 });

  return pdfDoc.save();
}

// Simulate OTP generation (this would normally be an API call)
async function requestOTP(aadhaarNumber) {
  return new Promise((resolve) => {
    console.log(`Sending OTP to Aadhaar Number: ${aadhaarNumber}`);
    resolve({ status: 'SUCCESS', otp: OTP });
  });
}

// Simulate OTP validation and document signing (this would normally interact with CVL API)
async function validateOTPAndSignDocument(aadhaarNumber, otp) {
  return new Promise((resolve, reject) => {
    if (otp === OTP) {
      console.log('OTP validated successfully');
      resolve({
        status: 'SUCCESS',
        signedDocument: createMockPdf(),
      });
    } else {
      reject(new Error('Invalid OTP'));
    }
  });
}

// Function to generate PDF with a signature
async function generatePdfWithSignature(pdfBytes, coordinates) {
  const pdfDoc = await PDFDocument.load(pdfBytes);
  const page = pdfDoc.getPages()[0];
  const { x, y } = coordinates;

  page.drawText(`Signed by: ${SIGNER_NAME}`, { x, y, size: 12 });
  
  return await pdfDoc.save();
}

// Save the signed document to the 'uploads' folder
async function saveToFile(filename, data) {
  const filePath = path.join(__dirname, 'uploads', filename);
  fs.writeFileSync(filePath, data);
  return filePath;
}

// Express route to handle file upload and signature
app.post('/sign', upload.single('pdfFile'), async (req, res) => {
  try {
    const { aadhaarNumber, otp } = req.body; // Get Aadhaar and OTP from the request
    const pdfFilePath = req.file.path; // The uploaded file's path

    // Step 1: Read the uploaded PDF file
    const pdfBytes = fs.readFileSync(pdfFilePath);

    // Step 2: Request OTP (simulated)
    const otpResponse = await requestOTP(aadhaarNumber);
    console.log('OTP Sent:', otpResponse.otp); // Mocked OTP sending

    // Step 3: Validate OTP and sign the document (simulated)
    const signedDocResponse = await validateOTPAndSignDocument(aadhaarNumber, otp);
    console.log(signedDocResponse.status);

    // Step 4: Generate PDF with a signature on it
    const signedPdfBytes = await generatePdfWithSignature(signedDocResponse.signedDocument, SIGNATURE_COORDINATES);

    // Step 5: Save the signed PDF to the uploads folder
    const signedPdfPath = await saveToFile('signed_document.pdf', signedPdfBytes);

    // Respond with the signed document's path
    res.json({
      message: 'Document signed successfully',
      signedPdfPath: signedPdfPath,
    });
  } catch (error) {
    console.error('Error during signing process:', error);
    res.status(500).json({ error: 'Something went wrong' });
  }
});

// Endpoint to serve the uploaded files (signed PDFs)
app.get('/uploads/:filename', (req, res) => {
  const { filename } = req.params;
  const filePath = path.join(__dirname, 'uploads', filename);
  res.sendFile(filePath);
});

// Start the server
app.listen(port, () => {
  console.log(`Server is running on http://localhost:${port}`);
});

Form Data:

pdfFile: (Select a test PDF file)

aadhaarNumber: (Simulate with any Aadhaar number)

otp: 123456 (Simulate with the mocked OTP)
http://localhost:3000/uploads/signed_document.pdf
 
